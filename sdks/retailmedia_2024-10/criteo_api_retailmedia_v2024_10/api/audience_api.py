"""
    Criteo API

    Criteo API - RetailMedia  # noqa: E501

    The version of the OpenAPI document: 2024-10
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from criteo_api_retailmedia_v2024_10.api_client import ApiClient, Endpoint as _Endpoint
from criteo_api_retailmedia_v2024_10.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from criteo_api_retailmedia_v2024_10.model.error_code_response import ErrorCodeResponse
from criteo_api_retailmedia_v2024_10.model.retail_media_contactlist_amendment_request import RetailMediaContactlistAmendmentRequest
from criteo_api_retailmedia_v2024_10.model.retail_media_contactlist_operation import RetailMediaContactlistOperation
from criteo_api_retailmedia_v2024_10.model.rm_audience_entity_v1_rm_audience_search_metadata_v1_list_response import RmAudienceEntityV1RmAudienceSearchMetadataV1ListResponse
from criteo_api_retailmedia_v2024_10.model.rm_audience_search_input_v1 import RmAudienceSearchInputV1
from criteo_api_retailmedia_v2024_10.model.rm_audience_segment_bulk_create_input_v1 import RmAudienceSegmentBulkCreateInputV1
from criteo_api_retailmedia_v2024_10.model.rm_audience_segment_bulk_delete_input_v1 import RmAudienceSegmentBulkDeleteInputV1
from criteo_api_retailmedia_v2024_10.model.rm_audience_segment_bulk_update_input_v1 import RmAudienceSegmentBulkUpdateInputV1
from criteo_api_retailmedia_v2024_10.model.rm_audience_segment_entity_v1_list_response import RmAudienceSegmentEntityV1ListResponse
from criteo_api_retailmedia_v2024_10.model.rm_audience_segment_entity_v1_rm_audience_segment_search_metadata_v1_list_response import RmAudienceSegmentEntityV1RmAudienceSegmentSearchMetadataV1ListResponse
from criteo_api_retailmedia_v2024_10.model.rm_audience_segment_id_entity_v1_list_response import RmAudienceSegmentIdEntityV1ListResponse
from criteo_api_retailmedia_v2024_10.model.rm_audience_segment_search_input_v1 import RmAudienceSegmentSearchInputV1
from criteo_api_retailmedia_v2024_10.model.rm_contact_list_statistics_entity_v1_response import RmContactListStatisticsEntityV1Response


class AudienceApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.bulk_create_audience_segments_endpoint = _Endpoint(
            settings={
                'response_type': (RmAudienceSegmentEntityV1ListResponse,),
                'auth': [
                    'oauth',
                    'oauth'
                ],
                'endpoint_path': '/2024-10/retail-media/accounts/{account-id}/audience-segments/create',
                'operation_id': 'bulk_create_audience_segments',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'account_id',
                    'rm_audience_segment_bulk_create_input_v1',
                ],
                'required': [
                    'account_id',
                    'rm_audience_segment_bulk_create_input_v1',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_id':
                        (str,),
                    'rm_audience_segment_bulk_create_input_v1':
                        (RmAudienceSegmentBulkCreateInputV1,),
                },
                'attribute_map': {
                    'account_id': 'account-id',
                },
                'location_map': {
                    'account_id': 'path',
                    'rm_audience_segment_bulk_create_input_v1': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/plain',
                    'application/json',
                    'text/json'
                ],
                'content_type': [
                    'application/json-patch+json',
                    'application/json',
                    'text/json',
                    'application/*+json'
                ]
            },
            api_client=api_client
        )
        self.bulk_delete_audience_segments_endpoint = _Endpoint(
            settings={
                'response_type': (RmAudienceSegmentIdEntityV1ListResponse,),
                'auth': [
                    'oauth',
                    'oauth'
                ],
                'endpoint_path': '/2024-10/retail-media/accounts/{account-id}/audience-segments/delete',
                'operation_id': 'bulk_delete_audience_segments',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'account_id',
                    'rm_audience_segment_bulk_delete_input_v1',
                ],
                'required': [
                    'account_id',
                    'rm_audience_segment_bulk_delete_input_v1',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_id':
                        (str,),
                    'rm_audience_segment_bulk_delete_input_v1':
                        (RmAudienceSegmentBulkDeleteInputV1,),
                },
                'attribute_map': {
                    'account_id': 'account-id',
                },
                'location_map': {
                    'account_id': 'path',
                    'rm_audience_segment_bulk_delete_input_v1': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/plain',
                    'application/json',
                    'text/json'
                ],
                'content_type': [
                    'application/json-patch+json',
                    'application/json',
                    'text/json',
                    'application/*+json'
                ]
            },
            api_client=api_client
        )
        self.bulk_update_audience_segments_endpoint = _Endpoint(
            settings={
                'response_type': (RmAudienceSegmentEntityV1ListResponse,),
                'auth': [
                    'oauth',
                    'oauth'
                ],
                'endpoint_path': '/2024-10/retail-media/accounts/{account-id}/audience-segments',
                'operation_id': 'bulk_update_audience_segments',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'account_id',
                    'rm_audience_segment_bulk_update_input_v1',
                ],
                'required': [
                    'account_id',
                    'rm_audience_segment_bulk_update_input_v1',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_id':
                        (str,),
                    'rm_audience_segment_bulk_update_input_v1':
                        (RmAudienceSegmentBulkUpdateInputV1,),
                },
                'attribute_map': {
                    'account_id': 'account-id',
                },
                'location_map': {
                    'account_id': 'path',
                    'rm_audience_segment_bulk_update_input_v1': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/plain',
                    'application/json',
                    'text/json'
                ],
                'content_type': [
                    'application/json-patch+json',
                    'application/json',
                    'text/json',
                    'application/*+json'
                ]
            },
            api_client=api_client
        )
        self.delete_contact_list_identifiers_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'oauth',
                    'oauth'
                ],
                'endpoint_path': '/2024-10/retail-media/audience-segments/{audience-segment-id}/contact-list/clear',
                'operation_id': 'delete_contact_list_identifiers',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'audience_segment_id',
                ],
                'required': [
                    'audience_segment_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'audience_segment_id':
                        (int,),
                },
                'attribute_map': {
                    'audience_segment_id': 'audience-segment-id',
                },
                'location_map': {
                    'audience_segment_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_audience_segment_contact_list_statistics_endpoint = _Endpoint(
            settings={
                'response_type': (RmContactListStatisticsEntityV1Response,),
                'auth': [
                    'oauth',
                    'oauth'
                ],
                'endpoint_path': '/2024-10/retail-media/accounts/{account-id}/audience-segments/{audience-segment-id}/contact-list',
                'operation_id': 'get_audience_segment_contact_list_statistics',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'account_id',
                    'audience_segment_id',
                ],
                'required': [
                    'account_id',
                    'audience_segment_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_id':
                        (str,),
                    'audience_segment_id':
                        (str,),
                },
                'attribute_map': {
                    'account_id': 'account-id',
                    'audience_segment_id': 'audience-segment-id',
                },
                'location_map': {
                    'account_id': 'path',
                    'audience_segment_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/plain',
                    'application/json',
                    'text/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.search_audience_segments_endpoint = _Endpoint(
            settings={
                'response_type': (RmAudienceSegmentEntityV1RmAudienceSegmentSearchMetadataV1ListResponse,),
                'auth': [
                    'oauth',
                    'oauth'
                ],
                'endpoint_path': '/2024-10/retail-media/accounts/{account-id}/audience-segments/search',
                'operation_id': 'search_audience_segments',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'account_id',
                    'rm_audience_segment_search_input_v1',
                    'limit',
                    'offset',
                ],
                'required': [
                    'account_id',
                    'rm_audience_segment_search_input_v1',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'limit',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                        'inclusive_maximum': 100,
                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_id':
                        (str,),
                    'rm_audience_segment_search_input_v1':
                        (RmAudienceSegmentSearchInputV1,),
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                },
                'attribute_map': {
                    'account_id': 'account-id',
                    'limit': 'limit',
                    'offset': 'offset',
                },
                'location_map': {
                    'account_id': 'path',
                    'rm_audience_segment_search_input_v1': 'body',
                    'limit': 'query',
                    'offset': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/plain',
                    'application/json',
                    'text/json'
                ],
                'content_type': [
                    'application/json-patch+json',
                    'application/json',
                    'text/json',
                    'application/*+json'
                ]
            },
            api_client=api_client
        )
        self.search_audiences_endpoint = _Endpoint(
            settings={
                'response_type': (RmAudienceEntityV1RmAudienceSearchMetadataV1ListResponse,),
                'auth': [
                    'oauth',
                    'oauth'
                ],
                'endpoint_path': '/2024-10/retail-media/accounts/{account-id}/audiences/search',
                'operation_id': 'search_audiences',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'account_id',
                    'rm_audience_search_input_v1',
                    'limit',
                    'offset',
                ],
                'required': [
                    'account_id',
                    'rm_audience_search_input_v1',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'limit',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                        'inclusive_maximum': 100,
                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_id':
                        (str,),
                    'rm_audience_search_input_v1':
                        (RmAudienceSearchInputV1,),
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                },
                'attribute_map': {
                    'account_id': 'account-id',
                    'limit': 'limit',
                    'offset': 'offset',
                },
                'location_map': {
                    'account_id': 'path',
                    'rm_audience_search_input_v1': 'body',
                    'limit': 'query',
                    'offset': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/plain',
                    'application/json',
                    'text/json'
                ],
                'content_type': [
                    'application/json-patch+json',
                    'application/json',
                    'text/json',
                    'application/*+json'
                ]
            },
            api_client=api_client
        )
        self.update_contact_list_identifiers_endpoint = _Endpoint(
            settings={
                'response_type': (RetailMediaContactlistOperation,),
                'auth': [
                    'oauth',
                    'oauth'
                ],
                'endpoint_path': '/2024-10/retail-media/audience-segments/{audience-segment-id}/contact-list/add-remove',
                'operation_id': 'update_contact_list_identifiers',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'audience_segment_id',
                    'retail_media_contactlist_amendment_request',
                ],
                'required': [
                    'audience_segment_id',
                    'retail_media_contactlist_amendment_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'audience_segment_id':
                        (int,),
                    'retail_media_contactlist_amendment_request':
                        (RetailMediaContactlistAmendmentRequest,),
                },
                'attribute_map': {
                    'audience_segment_id': 'audience-segment-id',
                },
                'location_map': {
                    'audience_segment_id': 'path',
                    'retail_media_contactlist_amendment_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def bulk_create_audience_segments(
        self,
        account_id,
        rm_audience_segment_bulk_create_input_v1,
        **kwargs
    ):
        """bulk_create_audience_segments  # noqa: E501

        Creates all segments with a valid configuration, and returns the full segments. For those that cannot be created, one or multiple errors are returned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bulk_create_audience_segments(account_id, rm_audience_segment_bulk_create_input_v1, async_req=True)
        >>> result = thread.get()

        Args:
            account_id (str): Account Id
            rm_audience_segment_bulk_create_input_v1 (RmAudienceSegmentBulkCreateInputV1): Segment creation parameter

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            RmAudienceSegmentEntityV1ListResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['account_id'] = \
            account_id
        kwargs['rm_audience_segment_bulk_create_input_v1'] = \
            rm_audience_segment_bulk_create_input_v1
        return self.bulk_create_audience_segments_endpoint.call_with_http_info(**kwargs)

    def bulk_delete_audience_segments(
        self,
        account_id,
        rm_audience_segment_bulk_delete_input_v1,
        **kwargs
    ):
        """bulk_delete_audience_segments  # noqa: E501

        Delete the segments associated to the given audience IDs.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bulk_delete_audience_segments(account_id, rm_audience_segment_bulk_delete_input_v1, async_req=True)
        >>> result = thread.get()

        Args:
            account_id (str): Account id
            rm_audience_segment_bulk_delete_input_v1 (RmAudienceSegmentBulkDeleteInputV1): Segment delete request.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            RmAudienceSegmentIdEntityV1ListResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['account_id'] = \
            account_id
        kwargs['rm_audience_segment_bulk_delete_input_v1'] = \
            rm_audience_segment_bulk_delete_input_v1
        return self.bulk_delete_audience_segments_endpoint.call_with_http_info(**kwargs)

    def bulk_update_audience_segments(
        self,
        account_id,
        rm_audience_segment_bulk_update_input_v1,
        **kwargs
    ):
        """bulk_update_audience_segments  # noqa: E501

        Updates the properties of all segments with a valid configuration, and returns the full segments. For those that cannot be updated, one or multiple errors are returned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bulk_update_audience_segments(account_id, rm_audience_segment_bulk_update_input_v1, async_req=True)
        >>> result = thread.get()

        Args:
            account_id (str): Account id
            rm_audience_segment_bulk_update_input_v1 (RmAudienceSegmentBulkUpdateInputV1): Segment Update request

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            RmAudienceSegmentEntityV1ListResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['account_id'] = \
            account_id
        kwargs['rm_audience_segment_bulk_update_input_v1'] = \
            rm_audience_segment_bulk_update_input_v1
        return self.bulk_update_audience_segments_endpoint.call_with_http_info(**kwargs)

    def delete_contact_list_identifiers(
        self,
        audience_segment_id,
        **kwargs
    ):
        """delete_contact_list_identifiers  # noqa: E501

        Delete all identifiers from a retail-media contact list audience-segment, with external audience segment id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_contact_list_identifiers(audience_segment_id, async_req=True)
        >>> result = thread.get()

        Args:
            audience_segment_id (int): The id of the contact list audience-segment to amend, we only accept external Id here

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['audience_segment_id'] = \
            audience_segment_id
        return self.delete_contact_list_identifiers_endpoint.call_with_http_info(**kwargs)

    def get_audience_segment_contact_list_statistics(
        self,
        account_id,
        audience_segment_id,
        **kwargs
    ):
        """get_audience_segment_contact_list_statistics  # noqa: E501

        Returns the statistics of a contact list segment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_audience_segment_contact_list_statistics(account_id, audience_segment_id, async_req=True)
        >>> result = thread.get()

        Args:
            account_id (str): Account Id
            audience_segment_id (str): Segment Id.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            RmContactListStatisticsEntityV1Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['account_id'] = \
            account_id
        kwargs['audience_segment_id'] = \
            audience_segment_id
        return self.get_audience_segment_contact_list_statistics_endpoint.call_with_http_info(**kwargs)

    def search_audience_segments(
        self,
        account_id,
        rm_audience_segment_search_input_v1,
        **kwargs
    ):
        """search_audience_segments  # noqa: E501

        Returns a list of segments that match the provided filters. If present, the filters are AND'ed together when applied.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.search_audience_segments(account_id, rm_audience_segment_search_input_v1, async_req=True)
        >>> result = thread.get()

        Args:
            account_id (str): Account Id
            rm_audience_segment_search_input_v1 (RmAudienceSegmentSearchInputV1): Segment search filters.

        Keyword Args:
            limit (int): The number of elements to be returned. The default is 50 and the maximum is 100.. [optional] if omitted the server will use the default value of 50
            offset (int): The (zero-based) offset into the collection. The default is 0.. [optional] if omitted the server will use the default value of 0
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            RmAudienceSegmentEntityV1RmAudienceSegmentSearchMetadataV1ListResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['account_id'] = \
            account_id
        kwargs['rm_audience_segment_search_input_v1'] = \
            rm_audience_segment_search_input_v1
        return self.search_audience_segments_endpoint.call_with_http_info(**kwargs)

    def search_audiences(
        self,
        account_id,
        rm_audience_search_input_v1,
        **kwargs
    ):
        """search_audiences  # noqa: E501

        Returns a list of audiences that match the provided filters. If present, the filters are AND'ed together when applied.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.search_audiences(account_id, rm_audience_search_input_v1, async_req=True)
        >>> result = thread.get()

        Args:
            account_id (str): Account Id
            rm_audience_search_input_v1 (RmAudienceSearchInputV1): Audience search filters.

        Keyword Args:
            limit (int): The number of elements to be returned. The default is 50 and the maximum is 100.. [optional] if omitted the server will use the default value of 50
            offset (int): The (zero-based) offset into the collection. The default is 0.. [optional] if omitted the server will use the default value of 0
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            RmAudienceEntityV1RmAudienceSearchMetadataV1ListResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['account_id'] = \
            account_id
        kwargs['rm_audience_search_input_v1'] = \
            rm_audience_search_input_v1
        return self.search_audiences_endpoint.call_with_http_info(**kwargs)

    def update_contact_list_identifiers(
        self,
        audience_segment_id,
        retail_media_contactlist_amendment_request,
        **kwargs
    ):
        """update_contact_list_identifiers  # noqa: E501

        Add/remove identifiers to or from a retail-media contact list audience-segment, with external audience segment id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_contact_list_identifiers(audience_segment_id, retail_media_contactlist_amendment_request, async_req=True)
        >>> result = thread.get()

        Args:
            audience_segment_id (int): The id of the contact list audience-segment to amend, we only accept external Id here
            retail_media_contactlist_amendment_request (RetailMediaContactlistAmendmentRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            RetailMediaContactlistOperation
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['audience_segment_id'] = \
            audience_segment_id
        kwargs['retail_media_contactlist_amendment_request'] = \
            retail_media_contactlist_amendment_request
        return self.update_contact_list_identifiers_endpoint.call_with_http_info(**kwargs)

