"""
    Criteo API Specification

    This is used to help Criteo clients use our APIs  # noqa: E501

    The version of the OpenAPI document: 2021-04
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from criteo_api_marketingsolutions_v2020_10.api_client import ApiClient, Endpoint as _Endpoint
from criteo_api_marketingsolutions_v2020_10.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from criteo_api_marketingsolutions_v2020_10.model.category_message import CategoryMessage
from criteo_api_marketingsolutions_v2020_10.model.category_updates_per_catalog import CategoryUpdatesPerCatalog
from criteo_api_marketingsolutions_v2020_10.model.category_updates_per_catalog_error_message_with_details import CategoryUpdatesPerCatalogErrorMessageWithDetails


class CategoryApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __get_categories(
            self,
            **kwargs
        ):
            """Gets categories  # noqa: E501

            Get the list of categories with the specified filters.  If a category is requested but is missing from current user's portfolio, it will not be included in the list.  If neither campaign ids nor advertisers ids are provided, then the user's portfolio will be used.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_categories(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                campaign_ids (str): Optional. One or more campaign ids, E.g., 78, 12932, 45236. If the campaign ids requested are not liked to advertisers in the user's portfolio, they will be skipped.. [optional]
                advertiser_ids (str): Optional. One or more advertiser ids, E.g., 78, 12932, 45236. If the advertiser ids requested are not part of the user's portfolio, they will be skipped.. [optional]
                category_hash_codes (str): Optional. One or more category hash codes.. [optional]
                enabled_only (bool): Optional. Returns only categories you can bid on. Defaults to false.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [CategoryMessage]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.get_categories = _Endpoint(
            settings={
                'response_type': ([CategoryMessage],),
                'auth': [
                    'Authorization'
                ],
                'endpoint_path': '/legacy/marketing/v1/categories',
                'operation_id': 'get_categories',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'campaign_ids',
                    'advertiser_ids',
                    'category_hash_codes',
                    'enabled_only',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'campaign_ids':
                        (str,),
                    'advertiser_ids':
                        (str,),
                    'category_hash_codes':
                        (str,),
                    'enabled_only':
                        (bool,),
                },
                'attribute_map': {
                    'campaign_ids': 'campaignIds',
                    'advertiser_ids': 'advertiserIds',
                    'category_hash_codes': 'categoryHashCodes',
                    'enabled_only': 'enabledOnly',
                },
                'location_map': {
                    'campaign_ids': 'query',
                    'advertiser_ids': 'query',
                    'category_hash_codes': 'query',
                    'enabled_only': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'text/json',
                    'application/xml',
                    'text/xml',
                    'text/html'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_categories
        )

        def __update_categories(
            self,
            categories_per_catalog,
            **kwargs
        ):
            """Enables/disables categories  # noqa: E501

            Update categories for multiple catalogs.<br />  Please note that all validations need to pass before applying the requested changes;  the subsequent validation error messages will be returned in the response.<br />  Please note that bidding will still happen for disabled categories, but using the Camapign's bid.  If the call is successful, full details about the changed categories will be returned.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update_categories(categories_per_catalog, async_req=True)
            >>> result = thread.get()

            Args:
                categories_per_catalog ([CategoryUpdatesPerCatalog]): The list of categories to be enabled/disabled, grouped by catalog.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [CategoryUpdatesPerCatalog]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['categories_per_catalog'] = \
                categories_per_catalog
            return self.call_with_http_info(**kwargs)

        self.update_categories = _Endpoint(
            settings={
                'response_type': ([CategoryUpdatesPerCatalog],),
                'auth': [
                    'Authorization'
                ],
                'endpoint_path': '/legacy/marketing/v1/categories',
                'operation_id': 'update_categories',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'categories_per_catalog',
                ],
                'required': [
                    'categories_per_catalog',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'categories_per_catalog':
                        ([CategoryUpdatesPerCatalog],),
                },
                'attribute_map': {
                },
                'location_map': {
                    'categories_per_catalog': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'text/json',
                    'application/xml',
                    'text/xml',
                    'text/html'
                ],
                'content_type': [
                    'application/json',
                    'text/json',
                    'application/xml',
                    'text/xml',
                    'application/x-www-form-urlencoded',
                    'text/html'
                ]
            },
            api_client=api_client,
            callable=__update_categories
        )
