"""
    Criteo API Specification

    This is used to help Criteo clients use our APIs  # noqa: E501

    The version of the OpenAPI document: 2021-04
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from criteo_api_marketingsolutions_v2020_10.api_client import ApiClient, Endpoint as _Endpoint
from criteo_api_marketingsolutions_v2020_10.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from criteo_api_marketingsolutions_v2020_10.model.campaign_bid_change_request import CampaignBidChangeRequest
from criteo_api_marketingsolutions_v2020_10.model.campaign_bid_change_response_message_with_details import CampaignBidChangeResponseMessageWithDetails
from criteo_api_marketingsolutions_v2020_10.model.campaign_bid_message import CampaignBidMessage
from criteo_api_marketingsolutions_v2020_10.model.campaign_message import CampaignMessage
from criteo_api_marketingsolutions_v2020_10.model.category_message import CategoryMessage
from criteo_api_marketingsolutions_v2020_10.model.request_ad_set_search import RequestAdSetSearch
from criteo_api_marketingsolutions_v2020_10.model.requests_ad_set_id import RequestsAdSetId
from criteo_api_marketingsolutions_v2020_10.model.requests_patch_ad_set import RequestsPatchAdSet
from criteo_api_marketingsolutions_v2020_10.model.response_ad_set_id import ResponseAdSetId
from criteo_api_marketingsolutions_v2020_10.model.response_read_ad_set import ResponseReadAdSet
from criteo_api_marketingsolutions_v2020_10.model.responses_ad_set_id import ResponsesAdSetId
from criteo_api_marketingsolutions_v2020_10.model.responses_read_ad_set import ResponsesReadAdSet


class CampaignApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __get_ad_set(
            self,
            ad_set_id,
            **kwargs
        ):
            """get_ad_set  # noqa: E501

            Get the data for the specified ad set  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_ad_set(ad_set_id, async_req=True)
            >>> result = thread.get()

            Args:
                ad_set_id (str): Id of the ad set

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ResponseReadAdSet
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['ad_set_id'] = \
                ad_set_id
            return self.call_with_http_info(**kwargs)

        self.get_ad_set = _Endpoint(
            settings={
                'response_type': (ResponseReadAdSet,),
                'auth': [
                    'Authorization'
                ],
                'endpoint_path': '/2021-04/marketing-solutions/ad-sets/{adSetId}',
                'operation_id': 'get_ad_set',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'ad_set_id',
                ],
                'required': [
                    'ad_set_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'ad_set_id':
                        (str,),
                },
                'attribute_map': {
                    'ad_set_id': 'adSetId',
                },
                'location_map': {
                    'ad_set_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/plain',
                    'application/json',
                    'text/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_ad_set
        )

        def __get_bids(
            self,
            **kwargs
        ):
            """Gets a the bids for campaigns and their categories  # noqa: E501

            Get the campaigns' bids, as well as the bids of their categories  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_bids(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                campaign_ids (str): Optional. The ids of the campaigns we want to get the bids on. If not specified, advertiserIds will be used.. [optional]
                advertiser_ids (str): Optional. The ids of the advertisers' campaigns we want to get the bids on. If campaignIds not specified, and neither is advertiserIds, all the advertisers in the user's portfolio are used.. [optional]
                category_hash_codes (str): Optional. Filters only specified categories. By default no filtering is applied.. [optional]
                bid_type (str): Optional. Filters by bid type. By default no filtering is applied.. [optional]
                campaign_status (str): Optional. Filters by campaign status. By default no filtering is applied.. [optional]
                pending_changes (bool): Optional. Filters only pending changes or settled ones. By default no filtering is applied.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [CampaignBidMessage]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.get_bids = _Endpoint(
            settings={
                'response_type': ([CampaignBidMessage],),
                'auth': [
                    'Authorization'
                ],
                'endpoint_path': '/legacy/marketing/v1/campaigns/bids',
                'operation_id': 'get_bids',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'campaign_ids',
                    'advertiser_ids',
                    'category_hash_codes',
                    'bid_type',
                    'campaign_status',
                    'pending_changes',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'bid_type',
                    'campaign_status',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('bid_type',): {

                        "UNKNOWN": "Unknown",
                        "CPC": "CPC",
                        "COS": "COS",
                        "CPO": "CPO"
                    },
                    ('campaign_status',): {

                        "RUNNING": "Running",
                        "ARCHIVED": "Archived",
                        "NOTRUNNING": "NotRunning"
                    },
                },
                'openapi_types': {
                    'campaign_ids':
                        (str,),
                    'advertiser_ids':
                        (str,),
                    'category_hash_codes':
                        (str,),
                    'bid_type':
                        (str,),
                    'campaign_status':
                        (str,),
                    'pending_changes':
                        (bool,),
                },
                'attribute_map': {
                    'campaign_ids': 'campaignIds',
                    'advertiser_ids': 'advertiserIds',
                    'category_hash_codes': 'categoryHashCodes',
                    'bid_type': 'bidType',
                    'campaign_status': 'campaignStatus',
                    'pending_changes': 'pendingChanges',
                },
                'location_map': {
                    'campaign_ids': 'query',
                    'advertiser_ids': 'query',
                    'category_hash_codes': 'query',
                    'bid_type': 'query',
                    'campaign_status': 'query',
                    'pending_changes': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'text/json',
                    'application/xml',
                    'text/xml',
                    'text/html'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_bids
        )

        def __get_categories(
            self,
            campaign_id,
            **kwargs
        ):
            """Gets categories  # noqa: E501

            Get the list of categories linked to the requested campaign.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_categories(campaign_id, async_req=True)
            >>> result = thread.get()

            Args:
                campaign_id (int): Mandatory. The id of the campaign the categories are linked to.

            Keyword Args:
                enabled_only (bool): Optional. Returns only categories you can bid on. Defaults to false.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                CategoryMessage
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['campaign_id'] = \
                campaign_id
            return self.call_with_http_info(**kwargs)

        self.get_categories = _Endpoint(
            settings={
                'response_type': (CategoryMessage,),
                'auth': [
                    'Authorization'
                ],
                'endpoint_path': '/legacy/marketing/v1/campaigns/{campaignId}/categories',
                'operation_id': 'get_categories',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'campaign_id',
                    'enabled_only',
                ],
                'required': [
                    'campaign_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'campaign_id':
                        (int,),
                    'enabled_only':
                        (bool,),
                },
                'attribute_map': {
                    'campaign_id': 'campaignId',
                    'enabled_only': 'enabledOnly',
                },
                'location_map': {
                    'campaign_id': 'path',
                    'enabled_only': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'text/json',
                    'application/xml',
                    'text/xml',
                    'text/html'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_categories
        )

        def __get_category(
            self,
            campaign_id,
            category_hash_code,
            **kwargs
        ):
            """Gets a specific category  # noqa: E501

            Get a specific category linked to the requested campaign.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_category(campaign_id, category_hash_code, async_req=True)
            >>> result = thread.get()

            Args:
                campaign_id (int): Mandatory. The id of the campaign the categories are linked to.
                category_hash_code (int): Mandatory. The id of the category to return.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                CategoryMessage
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['campaign_id'] = \
                campaign_id
            kwargs['category_hash_code'] = \
                category_hash_code
            return self.call_with_http_info(**kwargs)

        self.get_category = _Endpoint(
            settings={
                'response_type': (CategoryMessage,),
                'auth': [
                    'Authorization'
                ],
                'endpoint_path': '/legacy/marketing/v1/campaigns/{campaignId}/categories/{categoryHashCode}',
                'operation_id': 'get_category',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'campaign_id',
                    'category_hash_code',
                ],
                'required': [
                    'campaign_id',
                    'category_hash_code',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'campaign_id':
                        (int,),
                    'category_hash_code':
                        (int,),
                },
                'attribute_map': {
                    'campaign_id': 'campaignId',
                    'category_hash_code': 'categoryHashCode',
                },
                'location_map': {
                    'campaign_id': 'path',
                    'category_hash_code': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'text/json',
                    'application/xml',
                    'text/xml',
                    'text/html'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_category
        )

        def __patch_ad_sets(
            self,
            **kwargs
        ):
            """patch_ad_sets  # noqa: E501

            Patch a list of AdSets.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.patch_ad_sets(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                requests_patch_ad_set (RequestsPatchAdSet): List of adsets to patch.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ResponseAdSetId
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.patch_ad_sets = _Endpoint(
            settings={
                'response_type': (ResponseAdSetId,),
                'auth': [
                    'Authorization'
                ],
                'endpoint_path': '/2021-04/marketing-solutions/ad-sets',
                'operation_id': 'patch_ad_sets',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'requests_patch_ad_set',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'requests_patch_ad_set':
                        (RequestsPatchAdSet,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'requests_patch_ad_set': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/plain',
                    'application/json',
                    'text/json'
                ],
                'content_type': [
                    'application/json-patch+json',
                    'application/json',
                    'text/json',
                    'application/*+json'
                ]
            },
            api_client=api_client,
            callable=__patch_ad_sets
        )

        def __search_ad_sets(
            self,
            **kwargs
        ):
            """search_ad_sets  # noqa: E501

            Search for ad sets  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.search_ad_sets(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                request_ad_set_search (RequestAdSetSearch): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ResponsesReadAdSet
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.search_ad_sets = _Endpoint(
            settings={
                'response_type': (ResponsesReadAdSet,),
                'auth': [
                    'Authorization'
                ],
                'endpoint_path': '/2021-04/marketing-solutions/ad-sets/search',
                'operation_id': 'search_ad_sets',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'request_ad_set_search',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'request_ad_set_search':
                        (RequestAdSetSearch,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'request_ad_set_search': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/plain',
                    'application/json',
                    'text/json'
                ],
                'content_type': [
                    'application/json-patch+json',
                    'application/json',
                    'text/json',
                    'application/*+json'
                ]
            },
            api_client=api_client,
            callable=__search_ad_sets
        )

        def __start_ad_sets(
            self,
            **kwargs
        ):
            """start_ad_sets  # noqa: E501

            Start the specified list of ad sets  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.start_ad_sets(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                requests_ad_set_id (RequestsAdSetId): All the ad sets to start. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ResponsesAdSetId
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.start_ad_sets = _Endpoint(
            settings={
                'response_type': (ResponsesAdSetId,),
                'auth': [
                    'Authorization'
                ],
                'endpoint_path': '/2021-04/marketing-solutions/ad-sets/start',
                'operation_id': 'start_ad_sets',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'requests_ad_set_id',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'requests_ad_set_id':
                        (RequestsAdSetId,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'requests_ad_set_id': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/plain',
                    'application/json',
                    'text/json'
                ],
                'content_type': [
                    'application/json-patch+json',
                    'application/json',
                    'text/json',
                    'application/*+json'
                ]
            },
            api_client=api_client,
            callable=__start_ad_sets
        )

        def __stop_ad_sets(
            self,
            **kwargs
        ):
            """stop_ad_sets  # noqa: E501

            Stop the specified list of ad sets  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.stop_ad_sets(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                requests_ad_set_id (RequestsAdSetId): All the ad sets to stop. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ResponsesAdSetId
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.stop_ad_sets = _Endpoint(
            settings={
                'response_type': (ResponsesAdSetId,),
                'auth': [
                    'Authorization'
                ],
                'endpoint_path': '/2021-04/marketing-solutions/ad-sets/stop',
                'operation_id': 'stop_ad_sets',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'requests_ad_set_id',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'requests_ad_set_id':
                        (RequestsAdSetId,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'requests_ad_set_id': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/plain',
                    'application/json',
                    'text/json'
                ],
                'content_type': [
                    'application/json-patch+json',
                    'application/json',
                    'text/json',
                    'application/*+json'
                ]
            },
            api_client=api_client,
            callable=__stop_ad_sets
        )

        def __update_bids(
            self,
            bid_changes,
            **kwargs
        ):
            """Update bids for campaigns and their categories  # noqa: E501

            If a campaign bid is updated, all (if any) category bids for this campaign will be updated with the new value if they are initially equal to the campaign bid.  If the category bid is not wanted to be cascaded to the categories with the same bid value, new change bids must be added in the request for the categories where the value should be kept (with the initial value).  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update_bids(bid_changes, async_req=True)
            >>> result = thread.get()

            Args:
                bid_changes ([CampaignBidChangeRequest]): Specifies the list of bid changes to be applied.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [CampaignMessage]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['bid_changes'] = \
                bid_changes
            return self.call_with_http_info(**kwargs)

        self.update_bids = _Endpoint(
            settings={
                'response_type': ([CampaignMessage],),
                'auth': [
                    'Authorization'
                ],
                'endpoint_path': '/legacy/marketing/v1/campaigns/bids',
                'operation_id': 'update_bids',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'bid_changes',
                ],
                'required': [
                    'bid_changes',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'bid_changes':
                        ([CampaignBidChangeRequest],),
                },
                'attribute_map': {
                },
                'location_map': {
                    'bid_changes': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'text/json',
                    'application/xml',
                    'text/xml',
                    'text/html'
                ],
                'content_type': [
                    'application/json',
                    'text/json',
                    'application/xml',
                    'text/xml',
                    'application/x-www-form-urlencoded',
                    'text/html'
                ]
            },
            api_client=api_client,
            callable=__update_bids
        )
