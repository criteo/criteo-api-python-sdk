"""
    Criteo API Specification

    This is used to help Criteo clients use our APIs  # noqa: E501

    The version of the OpenAPI document: 2021-04
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from criteo_api_marketingsolutions_v2020_10.api_client import ApiClient, Endpoint as _Endpoint
from criteo_api_marketingsolutions_v2020_10.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from criteo_api_marketingsolutions_v2020_10.model.category_message import CategoryMessage
from criteo_api_marketingsolutions_v2020_10.model.get_portfolio_response import GetPortfolioResponse


class AdvertiserApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __api_portfolio_get(
            self,
            **kwargs
        ):
            """api_portfolio_get  # noqa: E501

            Use this call to fetch a list of all advertisers in your account.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_portfolio_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                GetPortfolioResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.api_portfolio_get = _Endpoint(
            settings={
                'response_type': (GetPortfolioResponse,),
                'auth': [
                    'Authorization'
                ],
                'endpoint_path': '/2021-04/advertisers/me',
                'operation_id': 'api_portfolio_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/plain',
                    'application/json',
                    'text/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_portfolio_get
        )

        def __get_categories(
            self,
            advertiser_id,
            **kwargs
        ):
            """Gets all advertiser's categories  # noqa: E501

            Get the list of all the categories linked to the requested advertiser.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_categories(advertiser_id, async_req=True)
            >>> result = thread.get()

            Args:
                advertiser_id (int): Mandatory. The id of the advertiser to return.

            Keyword Args:
                enabled_only (bool): Optional. Returns only categories you can bid on. Defaults to false.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [CategoryMessage]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['advertiser_id'] = \
                advertiser_id
            return self.call_with_http_info(**kwargs)

        self.get_categories = _Endpoint(
            settings={
                'response_type': ([CategoryMessage],),
                'auth': [
                    'Authorization'
                ],
                'endpoint_path': '/legacy/marketing/v1/advertisers/{advertiserId}/categories',
                'operation_id': 'get_categories',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'advertiser_id',
                    'enabled_only',
                ],
                'required': [
                    'advertiser_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'advertiser_id':
                        (int,),
                    'enabled_only':
                        (bool,),
                },
                'attribute_map': {
                    'advertiser_id': 'advertiserId',
                    'enabled_only': 'enabledOnly',
                },
                'location_map': {
                    'advertiser_id': 'path',
                    'enabled_only': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'text/json',
                    'application/xml',
                    'text/xml',
                    'text/html'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_categories
        )

        def __get_category(
            self,
            advertiser_id,
            category_hash_code,
            **kwargs
        ):
            """Gets a specific advertiser's category  # noqa: E501

            Get a specific category linked to the requested advertiser.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_category(advertiser_id, category_hash_code, async_req=True)
            >>> result = thread.get()

            Args:
                advertiser_id (int): Mandatory. The id of the advertiser to return.
                category_hash_code (int): Mandatory. The id of the category to return.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [CategoryMessage]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['advertiser_id'] = \
                advertiser_id
            kwargs['category_hash_code'] = \
                category_hash_code
            return self.call_with_http_info(**kwargs)

        self.get_category = _Endpoint(
            settings={
                'response_type': ([CategoryMessage],),
                'auth': [
                    'Authorization'
                ],
                'endpoint_path': '/legacy/marketing/v1/advertisers/{advertiserId}/categories/{categoryHashCode}',
                'operation_id': 'get_category',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'advertiser_id',
                    'category_hash_code',
                ],
                'required': [
                    'advertiser_id',
                    'category_hash_code',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'advertiser_id':
                        (int,),
                    'category_hash_code':
                        (int,),
                },
                'attribute_map': {
                    'advertiser_id': 'advertiserId',
                    'category_hash_code': 'categoryHashCode',
                },
                'location_map': {
                    'advertiser_id': 'path',
                    'category_hash_code': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'text/json',
                    'application/xml',
                    'text/xml',
                    'text/html'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_category
        )
